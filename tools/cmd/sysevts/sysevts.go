package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/jmacd/supruglue/tools/internal/arch"
	"github.com/jmacd/supruglue/tools/internal/csv"
)

func main() {
	if len(os.Args) != 2 {
		log.Fatal("usage: %s <sysevts.csv>\n", os.Args[0])
	}

	inp := os.Args[1]

	guard := strings.ToUpper("supruglue_include_sysevts_h")

	sysevts, err := csv.ReadFile[arch.SystemEvent](inp)
	if err != nil {
		log.Fatal("parse sysevts file: ", err)
	}

	fmt.Printf(`// Copyright Joshua MacDonald
// SPDX-License-Identifier: MIT

// Auto-generated by supruglue/tools/cmd/sysevts from supruglue/%s.
// Constants defined in am335x TRM 4.4.2.2 PRU-ICSS System Events.

#ifndef %s
#define %s

%s

#endif // %s
`, inp, guard, guard, func() string {
		var sb strings.Builder
		for _, sysevt := range sysevts {
			if sysevt.SignalName == "nirq" {
				continue
			}
			cppname := sysevt.CPPName()

			sb.WriteString("\n")
			sb.WriteString(fmt.Sprintf("// Event: %s\n", sysevt.SignalName))
			sb.WriteString(fmt.Sprintf("// Source: %s\n", sysevt.Source))

			sb.WriteString("#define ")
			sb.WriteString(cppname)
			sb.WriteString(" ((int8_t)")
			sb.WriteString(fmt.Sprint(sysevt.Number))
			sb.WriteString(")\n")
		}
		return sb.String()
	}(), guard)
}
