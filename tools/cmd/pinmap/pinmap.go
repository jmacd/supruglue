package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/jmacd/supruglue/tools/internal/arch"
	"github.com/jmacd/supruglue/tools/internal/csv"
)

func main() {
	if len(os.Args) != 3 {
		log.Fatal("usage: %s <arch> <pins.csv>\n", os.Args[0])
	}

	hw := os.Args[1]
	inp := os.Args[2]

	switch hw {
	case "test32":
	case "am335x":
	default:
		log.Fatal("unknown hardware: ", hw)
	}

	guard := strings.ToUpper("supruglue_" + hw + "_include_pinmap_h")

	pins, err := csv.ReadFile[arch.Pin](inp)
	if err != nil {
		log.Fatal("parse pin file: ", err)
	}

	fmt.Printf(`// Copyright Joshua MacDonald
// SPDX-License-Identifier: MIT

// Auto-generated by supruglue/tools/cmd/pinmap from supruglue/%s.

#ifndef %s
#define %s

%s

#endif // %s
`, inp, guard, guard, func() string {
		var sb strings.Builder
		for _, pin := range pins {
			if !pin.HasGpio() {
				continue
			}
			gbank, err := pin.GpioBank()
			if err != nil {
				log.Fatal("gpio bank parse error: %s: %s", pin.Name, err)
			}
			gbit, err := pin.GpioBit()
			if err != nil {
				log.Fatal("gpio bank parse error: %s: %s", pin.Name, err)
			}

			cppname := pin.Name
			cppname = strings.ReplaceAll(cppname, "-", "_")
			cppname = strings.ReplaceAll(cppname, ".", "_")

			sb.WriteString("\n")
			sb.WriteString(fmt.Sprintf("// %s\n", pin.Name))

			sb.WriteString("#define ")
			sb.WriteString(cppname)
			sb.WriteString(fmt.Sprint("_gpio_bank ", gbank, "\n"))

			sb.WriteString("#define ")
			sb.WriteString(cppname)
			sb.WriteString(fmt.Sprint("_gpio_bit ", gbit, "\n"))

			if pruNum, has := pin.PRUHasGpioFastOutput(); has {
				fbit, err := pin.PRUGpioFastOutputBit()
				if err != nil {
					log.Fatal("gpio fast bit parse: %w", err)
				}
				sb.WriteString(fmt.Sprint("#define ", cppname, "_gpio_pru", pruNum, "_output_r30_bit ", fbit, "\n"))
			}
			if pruNum, has := pin.PRUHasGpioFastInput(); has {
				fbit, err := pin.PRUGpioFastInputBit()
				if err != nil {
					log.Fatal("gpio fast bit parse: %w", err)
				}
				sb.WriteString(fmt.Sprint("#define ", cppname, "_gpio_pru", pruNum, "_input_r31_bit ", fbit, "\n"))
			}
		}
		return sb.String()
	}(), guard)
}
