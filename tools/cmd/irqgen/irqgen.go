package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/jmacd/supruglue/tools/internal/arch"
	"github.com/jmacd/supruglue/tools/internal/csv"
	"github.com/mitchellh/mapstructure"
	yaml "gopkg.in/yaml.v3"
)

// TODO: verify channels and interrupts are unique

func main() {
	if len(os.Args) < 3 {
		log.Fatal("usage: %s <sysevts.csv> <irqconfig.yaml> ...\n", os.Args[0])
	}
	sevts, err := csv.ReadFile[arch.SystemEvent](os.Args[1])
	if err != nil {
		log.Fatalf("unmarshal %s: %v\n", os.Args[1], err)
	}
	sysevtMap := arch.SystemEventMap(sevts)

	var combined arch.IRQs
	hostIRQ := -1

	for _, arg := range os.Args[2:] {
		obj := map[string]interface{}{}

		data, err := os.ReadFile(arg)
		if err != nil {
			log.Fatalf("read yaml #%v\n", err)
		}
		err = yaml.Unmarshal(data, obj)
		if err != nil {
			log.Fatalf("unmarshal yaml: %v\n", err)
		}
		var result arch.IRQs
		dec, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
			ErrorUnused: true,
			Result:      &result,
		})
		if err != nil {
			log.Fatalf("decode yaml #%v\n", err)
		}
		err = dec.Decode(obj)
		if err != nil {
			log.Fatalf("decode yaml #%v\n", err)
		}

		for i := range result.Incoming {
			_, ok := sysevtMap[result.Incoming[i].Event]
			if !ok {
				log.Fatalf("cannot find system event %s\n", result.Incoming[i].Event)
			}
			if result.Incoming[i].Host != nil {
				if hostIRQ >= 0 {
					log.Fatalf("multiple host interrupts set\n")
				}
				hostIRQ = *result.Incoming[i].Host
			}
		}
		combined.Incoming = append(combined.Incoming, result.Incoming...)
	}

	if hostIRQ < 0 {
		log.Fatalf("missing host interrupt\n")
	}

	guard := strings.ToUpper("supruglue_include_irqgen_h")

	fmt.Printf(`// Copyright Joshua MacDonald
// SPDX-License-Identifier: MIT

// Auto-generated by supruglue/tools/cmd/irqgen from supruglue/%s.

#ifndef %s
#define %s

#include <stdint.h>
#include "external/ti-pru-support/include/pru_types.h"
#include "lib/soc/sysevts.h"

#pragma DATA_SECTION(supruglue_incoming_irq_rsc, ".pru_irq_map")
#pragma RETAIN(supruglue_incoming_irq_rsc)

// This is a list of interrupts going to the PRU.
struct pru_irq_rsc supruglue_incoming_irq_rsc = {
  0, // type
  %d, // number of entries
%s};

#endif // %s
`, os.Args[2], guard, guard, len(combined.Incoming), func() string {
		var sb strings.Builder
		sb.WriteString("  {\n")
		for _, irq := range combined.Incoming {
			sb.WriteString("    { ")
			sb.WriteString(irq.Event)
			sb.WriteString(", ")
			sb.WriteString(fmt.Sprint(irq.Channel))
			sb.WriteString(", ")
			sb.WriteString(fmt.Sprint(hostIRQ))
			sb.WriteString("},\n")
		}
		sb.WriteString("  },\n")
		return sb.String()
	}(), guard)
}
